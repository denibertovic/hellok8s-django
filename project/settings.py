"""
Django settings for hellok8s project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ

env = environ.Env()


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.get_value("DJANGO_SECRET_KEY", default="CHANGEME")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", False)

HOSTNAME = env.get_value("DJANGO_HOSTNAME", default="localhost")

ALLOWED_HOSTS = [
    "localhost",  # we still explicitly add localhost
    HOSTNAME,
    env.get_value("K8S_POD_IP", default="127.0.0.1"),
] + env.list("DJANGO_ALLOWED_HOSTS", default=[])

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "myauth",
    "storages",
    "myutils",
    "post",
]

# custom auth
AUTH_USER_MODEL = "myauth.MyUser"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    INSTALLED_APPS += ["django_browser_reload"]
    MIDDLEWARE += [
        "django_browser_reload.middleware.BrowserReloadMiddleware",
    ]


ROOT_URLCONF = "project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "project.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    # Raises ImproperlyConfigured exception if DATABASE_URL not in os.environ
    "default": env.db(
        "DJANGO_DATABASE_URL",
        default="postgres://postgres:postgres@postgres:5432/postgres",
    ),
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


MEDIA_ROOT = env.get_value("DJANGO_MEDIA_ROOT", default="media")
MEDIA_URL = "/media/"

STATIC_ROOT = env.get_value("DJANGO_STATIC_ROOT", default="static")
STATIC_URL = "/static/"
ADMIN_MEDIA_PREFIX = "/static/admin/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CSRF_COOKIE_SECURE = env.bool("DJANGO_CSRF_COOKIE_SECURE", False)
CSRF_TRUSTED_ORIGINS = env.list("DJANGO_CSRF_TRUSTED_ORIGINS", default=[])

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}

PROD = env.bool("DJANGO_PROD", False)
if PROD:
    # for static files
    STORAGES = {
        "default": {
            "BACKEND": "core.customstorage.PublicMediaStorage",
        },
        "staticfiles": {
            "BACKEND": "core.customstorage.StaticStorage",
        },
    }

    # Remove query string since the bucket is public
    AWS_QUERYSTRING_AUTH = False

    # This should make the static url be servable via nginx
    AWS_S3_CUSTOM_DOMAIN = "hellok8s-django.deni.cloud"

    # another option is to get secrets directly from a secret store like
    # hashicorp vault (or similar) - either during bootup or on-demand
    AWS_ACCESS_KEY_ID = env.get_value("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = env.get_value("AWS_SECRET_ACCESS_KEY")

    AWS_STORAGE_BUCKET_NAME = env.get_value("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = env.get_value("AWS_S3_REGION_NAME")

    AWS_DEFAULT_ACL = "public-read"
    AWS_S3_SIGNATURE_VERSION = "s3v4"

    AWS_S3_HOST = "s3.%s.scw.cloud" % (AWS_S3_REGION_NAME,)
    AWS_S3_ENDPOINT_URL = "https://%s" % (AWS_S3_HOST,)


TEST = env.bool("DJANGO_TEST", False)
if TEST:
    # Use SQLite for testing for faster test execution
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",  # In-memory database for fastest tests
        }
    }
    PASSWORD_HASHERS = [
        "django.contrib.auth.hashers.MD5PasswordHasher",
    ]
